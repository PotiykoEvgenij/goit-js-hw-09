{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEAC,EAAAF,GAASG,OAAOC,KAAK,CACnBC,SAAU,YACVC,SAAU,OACVC,aAAc,MACdC,MAAO,QACPC,QAAS,GACTC,QAAS,MAGX,IAAMC,EAAOC,SAASC,cAAc,SAEpC,SAASC,EAAcT,EAAUU,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAACZ,WAAUU,UAEnBG,EAAO,CAACb,WAAUU,S,GAEnBA,E,IAIPJ,EAAKY,iBAAiB,UAAU,SAACC,GAC/BA,EAAMC,iBAsBN,IApBA,IAAMC,EAAaf,EAAKgB,SAASZ,MAC3Ba,EAAYjB,EAAKgB,SAASE,KAC1BC,EAAcnB,EAAKgB,SAASI,OAE5BC,EAAQC,OAAOP,EAAWQ,OAC1BL,EAAOI,OAAOL,EAAUM,OACxBH,EAASE,OAAOH,EAAYI,OAczBC,EAAI,EAAGA,EAAIJ,EAAQI,IAC1BrB,EAAcqB,EAAI,EAAGH,EAAQG,EAAIN,GAChCO,MAAK,SAAAC,G,IAAGhC,EAAQgC,EAARhC,SAAUU,EAAKsB,EAALtB,MACjBb,EAAAF,GAASG,OAAOmC,QAAQ,uBAAwCC,OAAflC,EAAS,QAAYkC,OAANxB,EAAM,M,IAErEyB,OAAM,SAAAH,G,IAAGhC,EAAQgC,EAARhC,SAAUU,EAAKsB,EAALtB,MAClBb,EAAAF,GAASG,OAAOsC,QAAQ,sBAAqCF,OAAflC,EAAS,QAAYkC,OAANxB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nNotiflix.Notify.init({\n  position: 'right-top',\n  distance: '10px',\n  borderRadius: '5px',\n  width: '300px',\n  opacity: 0.8,\n  timeout: 3000,\n});\n\nconst form = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay})\n      } else {\n        reject({position, delay})\n      }\n    }, delay);\n  });\n};\n\nform.addEventListener('submit', (event) => {\n  event.preventDefault();\n\n  const delayInput = form.elements.delay;\n  const stepInput = form.elements.step;\n  const amountInput = form.elements.amount;\n\n  const delay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n  // for (let i = 0; i < amount; i++) {\n  //   const position = i + 1;\n  //   const delay = delay + 1 * step;\n\n  //   createPromise(position, promiseDelay)\n  //     .then(({ position, delay }) => {\n  //     Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  //     })\n  //     .catch(({ position, delay }) => {\n  //       Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  //     })\n  // }\n  for (let i = 0; i < amount; i++)  {\n    createPromise(i + 1, delay + i * step)\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      })\n  }\n})\n"],"names":["$6JpON","parcelRequire","$parcel$interopDefault","Notify","init","position","distance","borderRadius","width","opacity","timeout","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delayInput","elements","stepInput","step","amountInput","amount","delay1","Number","value","i","then","param","success","concat","catch","failure"],"version":3,"file":"03-promises.422fd6b1.js.map"}